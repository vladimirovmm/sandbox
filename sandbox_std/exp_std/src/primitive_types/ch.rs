#![cfg(test)]

use rand::seq::IteratorRandom;

//
#[test]
fn test_match() {
    let c = 'a';

    match c {
        'a'..='z' => println!("–≠—Ç–æ –±—É–∫–≤–∞"),
        _ => println!("–ù–µ –≤ –¥–µ–∞–ø–æ–∑–æ–Ω–µ"),
    }

    let c = '–±';
    if matches!(c, '–∞'..='—è') {
        println!("–†—É—Å—Å–∫–∞—è –±—É–∫–≤–∞");
    }

    let c = "abcdefghijklmnopqrstuvwxyz"
        .chars()
        .choose(&mut rand::rng())
        .unwrap();

    println!("–†–∞–Ω–¥–æ–º–Ω–∞—è –±—É–∫–≤–∞ {c}");

    //
    let dist = u32::from(char::MAX) - u32::from(char::MIN);
    let size = (char::MIN..=char::MAX).count() as u32;
    assert!(size < dist);
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤: {size} {dist}");

    for c in 'a'..='z' {
        print!("{c}={:?}, ", c as u32);
    }
    println!();
    println!();

    for cn in 97..122 {
        print!("{}={cn}, ", char::from_u32(cn).unwrap());
    }
    println!();
    println!();

    assert_eq!('1'.to_digit(10), Some(1));
    assert_eq!('f'.to_digit(16), Some(15));
    assert_eq!('z'.to_digit(16), None);

    assert_eq!('A'.len_utf8(), 1);
    assert_eq!('√ü'.len_utf8(), 2);
    assert_eq!('√ü'.len_utf16(), 1);
    assert_eq!('‚Ñù'.len_utf8(), 3);
    assert_eq!('üí£'.len_utf8(), 4);
    assert_eq!('üí£'.len_utf16(), 2);

    let text = "–î–µ–º–æ —Ç–µ–∫—Å—Ç. –ò–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—Ä–µ–∑–∞—Ç—å —Ü–∏—Ñ—Ä—ã 2025.03.21";

    // –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    let s: String = text.chars().filter(|c| c.is_alphabetic()).collect();
    println!("{s}"); // –î–µ–º–æ—Ç–µ–∫—Å—Ç–ò–∑–∫–æ—Ç–æ—Ä–æ–≥–æ–Ω—É–∂–Ω–æ–≤—ã—Ä–µ–∑–∞—Ç—å—Ü–∏—Ñ—Ä—ã

    // –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    let s: String = text
        .chars()
        .filter(|c| c.is_alphabetic() || c.is_ascii_whitespace())
        .collect(); // –î–µ–º–æ —Ç–µ–∫—Å—Ç –ò–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—Ä–µ–∑–∞—Ç—å —Ü–∏—Ñ—Ä—ã
    println!("{s}");

    // –¢–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
    let s: String = text.chars().filter(|c| c.is_uppercase()).collect(); // –î–ò
    println!("{s}");

    // –¢–æ–ª—å–∫–æ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã
    let s: String = text.chars().filter(|c| c.is_lowercase()).collect(); // –µ–º–æ—Ç–µ–∫—Å—Ç–∑–∫–æ—Ç–æ—Ä–æ–≥–æ–Ω—É–∂–Ω–æ–≤—ã—Ä–µ–∑–∞—Ç—å—Ü–∏—Ñ—Ä—ã
    println!("{s}");

    // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    let s: String = text.chars().filter(|c| c.is_numeric()).collect(); // 20250321
    println!("{s}");

    // –¶–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    let s: String = text
        .chars()
        .filter(|c| c.is_alphanumeric() || c.is_whitespace())
        .collect(); // –î–µ–º–æ —Ç–µ–∫—Å—Ç –ò–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—Ä–µ–∑–∞—Ç—å —Ü–∏—Ñ—Ä—ã 20250321
    println!("{s}");

    // –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
    let s: String = text.chars().filter(|c| c.is_ascii_punctuation()).collect(); // ...
    println!("{s}");
}
